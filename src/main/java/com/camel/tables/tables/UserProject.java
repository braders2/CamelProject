/**
 * This class is generated by jOOQ
 */
package com.camel.tables.tables;


import com.camel.tables.Database;
import com.camel.tables.Keys;
import com.camel.tables.tables.records.UserProjectRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserProject extends TableImpl<UserProjectRecord> {

    private static final long serialVersionUID = 325648035;

    /**
     * The reference instance of <code>database.user_project</code>
     */
    public static final UserProject USER_PROJECT = new UserProject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserProjectRecord> getRecordType() {
        return UserProjectRecord.class;
    }

    /**
     * The column <code>database.user_project.projects_id_project</code>.
     */
    public final TableField<UserProjectRecord, Integer> PROJECTS_ID_PROJECT = createField("projects_id_project", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>database.user_project.users_id_user</code>.
     */
    public final TableField<UserProjectRecord, Integer> USERS_ID_USER = createField("users_id_user", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>database.user_project.date_from</code>.
     */
    public final TableField<UserProjectRecord, Date> DATE_FROM = createField("date_from", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>database.user_project.date_to</code>.
     */
    public final TableField<UserProjectRecord, Date> DATE_TO = createField("date_to", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * Create a <code>database.user_project</code> table reference
     */
    public UserProject() {
        this("user_project", null);
    }

    /**
     * Create an aliased <code>database.user_project</code> table reference
     */
    public UserProject(String alias) {
        this(alias, USER_PROJECT);
    }

    private UserProject(String alias, Table<UserProjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserProject(String alias, Table<UserProjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Database.DATABASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserProjectRecord> getPrimaryKey() {
        return Keys.KEY_USER_PROJECT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserProjectRecord>> getKeys() {
        return Arrays.<UniqueKey<UserProjectRecord>>asList(Keys.KEY_USER_PROJECT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserProjectRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserProjectRecord, ?>>asList(Keys.FK_PROJECTS_HAS_USERS_PROJECTS, Keys.FK_PROJECTS_HAS_USERS_USERS1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserProject as(String alias) {
        return new UserProject(alias, this);
    }

    /**
     * Rename this table
     */
    public UserProject rename(String name) {
        return new UserProject(name, null);
    }
}
